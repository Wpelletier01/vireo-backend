    def addVideo(self, data):
        # TODO: validate size
        buffer_id = self.upload.pushToBuffer(data)
        print(buffer_id, flush=True)

        return {"buffer_id": buffer_id}, 200

    def handleVideo(self, data: dict):

        try:
            self.upload.handle(data, self.db_client)
            return "uploaded", 200

        except UploadErr as e:
            print(e.msg, flush=True)
            return e.msg, 400
        except DatabaseError as e:
            return "Database", 500,

    def retreive_video_info(self):
        # TODO: check how we can join this function with getVideoInfo
        info = {"videos": []}

        videos = self.db_client.queryForValue("""
            SELECT PathHash,ChannelID,Title
            FROM Videos;""")

        i = 0

        while i < len(videos):
            hpath = videos[i][0]
            cid = videos[i][1]
            title = videos[i][2]

            channel = self.db_client.queryForValue(f"""
                SELECT Username
                FROM Channels
                WHERE ChannelID = '{cid}';

            """)[0][0]

            info["videos"].append({
                "thumbnail": hpath,
                "channel": channel,
                "title": title,
                "hpath": hpath
            })

            i += 1

        return info, 200

    def getVideoInfo(self, hpath: str):

        # TODO: validate that hpath exist

        try:
            title, desc, date, cid = self.db_client.queryForValue(f"""
                    SELECT Title,Description,Upload,ChannelID
                    FROM Videos
                    WHERE PathHash = '{hpath}';""")[0]

        except IndexError:
            return {"status": "NOT FOUND"}, 200

        channel = self.db_client.queryForValue(f"""
                SELECT Username
                FROM Channels
                WHERE ChannelID = '{cid}'""")[0][0]

        return {
            "status": "FOUND",
            "title": title,
            "channel": channel,
            "description": desc,
            "date": f"{date.year}-{date.month}-{date.day}"}, 200

    def getChannelVideo(self, username):
        # TODO: try to join to retreive video info

        info = {"videos": []}

        cid = self.db_client.queryForValue(f"""

            SELECT ChannelID
            FROM Channels
            WHERE Username = '{username}';

        """)[0][0]

        videos = self.db_client.queryForValue(f"""
            SELECT PathHash,Title,Upload
            FROM Videos
            WHERE ChannelID = '{cid}';""")

        print(videos)

        i = 0
        while i < len(videos):
            hpath = videos[i][0]
            title = videos[i][1]
            upload = videos[i][2]

            # TODO: no need to sent two time hpath
            info["videos"].append({
                "thumbnail": hpath,
                "title": title,
                "date": f"{upload.year}-{upload.month}-{upload.day}"

            })

            i += 1

        return info, 200

    def search(self, stype, squery):

        resp = []
        # TODO: add duration of info return

        # TODO: make different type of query like for only channel
        if stype == "all":

            videos = self.db_client.queryForValue(f"""
                SELECT v.Title, c.Username, v.PathHash
                FROM Videos v
                JOIN Channels c
                ON v.ChannelID = c.ChannelID
                WHERE
	                Title like '%{squery}%' OR
                    Description like '%{squery}%';""")

            # TODO: add query for the number of video that each channels have
            channels = self.db_client.queryForValue(f"""
                SELECT Username
                FROM Channels
                WHERE Username like '%{squery}%';""")

            for video in videos:
                info = {
                    "type": "video",
                    "title": video[0],
                    "channel": video[1],
                    "hpath": video[2]
                }

                resp.append(info)

            for channel in channels:
                print(channel[0])

                # TODO: add query for the number of video that each channels have
                info = {
                    "type": "channel",
                    "channel": channel[0],
                    "title": None,
                    "hpath": None

                }

                resp.append(info)

        return {"response": resp}, 200

-====================================================================================================

@app.route("/upload/video", methods=['POST'])
def upload():
    data = request.get_data()
    id_ = server.addVideo(data)
    print(id_)
    return id_


@app.route("/upload/videoinfo", methods=['POST'])
def uploadvideoinfo():
    time.sleep(3)
    data = request.get_json()
    print(data)
    resp = server.handleVideo(data)
    print(resp)

    return resp


@app.route("/videos", methods=["GET"])
def home_video():
    data = server.retreive_video_info()

    print(data)
    return data


@app.route("/thumbnail/<string:hpath>", methods=["GET"])
def get_thumbnail(hpath):
    return send_file(os.path.join(TMP_THUMB, f"{hpath}.png"))


@app.route("/video/<string:hpath>")
def getVideo(hpath):
    return make_response(send_from_directory(TMP_VIDEO, f"{hpath}.mp4"))


@app.route("/video/info/<string:hpath>")
def getVideoInfo(hpath):
    return server.getVideoInfo(hpath)


@app.route("/channel/videos/<string:channel>", methods=["GET"])
def getChannelVideos(channel):
    data = server.getChannelVideo(channel)
    print(data)
    return data


@app.route("/search/<string:stype>/<string:query>")
def search(stype, query):
    print("holdup")
    data = server.search(stype, query)
    print(data)
    return dat